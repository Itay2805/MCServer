from ctypes import *
from datetime import datetime
import os.path as path
import urllib.request
import json

# TODO: switch to using go:generate

# This has all of the data we need
import stringcase

with urllib.request.urlopen("https://raw.githubusercontent.com/PrismarineJS/minecraft-data/master/data/pc/1.15.2/blocks.json") as f:
    blocks = json.load(f)

print("// Code generated by scripts/generate_blocks.go; DO NOT EDIT.")
print("// This file was generated by robots at")
print("// " + str(datetime.now()))
print()

#
# Translation between material to our
# enum
#
MATERIALS = {
    'rock': 'MaterialRock',
    'dirt': 'MaterialDirt',
    'plant': 'MaterialPlant',
    'wood': 'MaterialWood',
    'web': 'MaterialWeb',
    'wool': 'MaterialWool'
}

#
# These are blocks that are missing a material
# in the json
#
UNKNOWNS = {
    'bamboo_sapling': 'plant',
    'bamboo': 'plant',

    # TODO: we can probably add to the generator
    #       so it will check if the variation of the block
    #       exists with a material instead of hardcoding
    'polished_granite_stairs': 'rock',
    'smooth_red_sandstone_stairs': 'rock',
    'mossy_stone_brick_stairs': 'rock',
    'polished_diorite_stairs': 'rock',
    'mossy_cobblestone_stairs': 'rock',
    'end_stone_brick_stairs': 'rock',
    'stone_stairs': 'rock',
    'smooth_sandstone_stairs': 'rock',
    'smooth_quartz_stairs': 'rock',
    'granite_stairs': 'rock',
    'andesite_stairs': 'rock',
    'polished_andesite_stairs': 'rock',
    'diorite_stairs': 'rock',
    'brick_wall': 'rock',
    'prismarine_wall': 'rock',
    'red_sandstone_wall': 'rock',
    'mossy_stone_brick_wall': 'rock',
    'granite_wall': 'rock',
    'stone_brick_wall': 'rock',
    'nether_brick_wall': 'rock',
    'andesite_wall': 'rock',
    'red_nether_brick_wall': 'rock',
    'sandstone_wall': 'rock',
    'end_stone_brick_wall': 'rock',
    'diorite_wall': 'rock',


    'loom': 'wood',
    'barrel': 'wood',
    'smoker': 'rock',
    'blast_furnace': 'rock',
    'cartography_table': 'wood',
    'fletching_table': 'wood',
    'grindstone': 'rock',
    'lectern': 'wood',
    'smithing_table': 'rock',
    'lantern': 'rock',
    'campfire': 'wood',
    'jigsaw': 'rock',
    'composter': 'wood',
    'bee_nest': 'wood',
    'beehive': 'wood',
}

print("package block")
print()
for block in blocks:
    name = stringcase.pascalcase(block['name'])
    print(f"var {name} = &Block{{")
    print(f"\tId: {block['id']},")
    print(f"\tName: \"{block['name']}\",")
    print(f"\tDefaultStateId: {block['defaultState']},")
    print(f"\tSolid: {'false' if block['boundingBox'] == 'nullprovider' else 'true'},")
    print(f"\tTransparent: {'true' if block['transparent'] else 'false'},")
    print(f"\tFilterLight: {block['filterLight']},")
    print(f"\tEmitLight: {block['emitLight']},")
    if 'material' in block:
        if block['material'] == 'UNKNOWN_MATERIAL':
            block['material'] = UNKNOWNS[block['name']]
        print(f"\tMaterial: {MATERIALS[block['material']]},")
    else:
        print(f"\tMaterial: MaterialAir,")
    print("}")
print()

print("var blocks = [...]*Block{")
for block in blocks:
    name = stringcase.pascalcase(block['name'])
    print(f"\t{block['id']}: {name},")
print("}")
print("")

print("var stateIdToBlockId = [...]*Block{")
for block in blocks:
    for i in range(block['minStateId'], block['maxStateId']):
        print(f"\tblocks[{block['id']}],")
print("}")
print("")
